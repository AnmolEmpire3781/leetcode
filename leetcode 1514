class Solution {
public:
//similar to Dijkstraâ€™s Shortest Path Algorithm, but instead of minimizing distance, we are maximizing probability.
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succ, int start_node, int end_node) {
unordered_map<int,vector<pair<int,double>>>graph(n);
        for(int i=0;i<edges.size();i++)
        {
            int u=edges[i][0],v=edges[i][1];
            double prob_wgt=succ[i];
            graph[u].push_back({v,prob_wgt});
            graph[v].push_back({u,prob_wgt});

        }
        priority_queue<pair<double,int>>pq;
        vector<double>max_prob(n,0.00);
        max_prob[start_node]=1.00; //As prob to reach start from start is 100%
        pq.push({1.00,start_node});
        while(!pq.empty())
        {
            double prob = pq.top().first;
            int curr_node = pq.top().second;
            pq.pop();
            if(curr_node==end_node)
            return prob;
            for(auto &ngb:graph[curr_node])

            {
                       int next_node=ngb.first;
                       double edge_prob=ngb.second; //graph tracing 
                       double new_prob=prob*edge_prob;
                       if(new_prob>max_prob[next_node])
                       {
                        max_prob[next_node]=new_prob;
                        pq.push({new_prob,next_node});
                       }
            }
        }
        return 0.00;
    }
};
