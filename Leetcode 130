//In-Place dfs traversal

class Solution {
public:
void dfs(vector<vector<char>>& board, int i, int j) {
        // Ensure it's within bounds and is an 'O' (unvisited)
        if (i < 0 || j < 0 || i >= board.size() || j >= board[0].size() || board[i][j] != 'O') {
            return;
        }
        
        // Mark the current cell as safe
        board[i][j] = 'S';
        
        // Explore all four directions
        dfs(board, i + 1, j);  // down
        dfs(board, i - 1, j);  // up
        dfs(board, i, j + 1);  // right
        dfs(board, i, j - 1);  // left
    }

    void solve(vector<vector<char>>& board) {
        int n=board.size();
        int m=board[0].size();
        for(int i=0;i<m;i++)
        {
            dfs(board,0,i);
            dfs(board,n-1,i);
        }
          for(int j=0;j<n;j++)
          {
            dfs(board,j,0);
            dfs(board,j,m-1);
          }        

           // Step 2: Flip all surrounded 'O's to 'X' and 'S' (safe) back to 'O'
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';  // Surrounded regions
                } else if (board[i][j] == 'S') {
                    board[i][j] = 'O';  // Safe regions
                }
            }
        }
    }
};
