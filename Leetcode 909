class Solution {
public:

pair<int,int> getco(int value,int n)
{
       int row=(n-1)-((value-1)/n);
       int col=(value-1)%n;

       if((n%2==1 && row%2==1) || (n%2==0 && row%2==0))
       col=(n-1)-col;

      return  make_pair(row,col);
}
    int snakesAndLadders(vector<vector<int>>& board) {
       int n=board.size();
       queue<int>q;
       int steps=0;
       q.push(1);
       vector<vector<bool>>visited(n,vector<bool>(n,false));
       visited[n-1][0]=true;
       while(!q.empty()) 
       {  int size=q.size();
        { for(int i=0;i<size;i++)
             {int curr = q.front();
                q.pop();

                if (curr == n * n) 
        return steps;
        for(int k=1;k<7;k++)
        {
            if(curr+k>n*n)
            break;
            pair<int,int> coord=getco(curr+k,n);

            int x_coord=coord.first;
            int y_coord=coord.second;
            if(visited[x_coord][y_coord]==true)
            continue;
            visited[x_coord][y_coord]=true;
            if(board[x_coord][y_coord]==-1)
            q.push(curr+k);
            else
            q.push(board[x_coord][y_coord]);
        }
             }
        
        steps++;
       }
       }
       return -1;   
    }
};
